# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FinancialDetails(BaseModel):
    """
    FinancialDetails
    """ # noqa: E501
    period_month: Optional[Any] = Field(description="Period month with format YYYY-MM, for example, 2022-12")
    revenue: Optional[Any] = Field(description="Monthly revenue.")
    costs: Optional[Any] = Field(default=None, description="Monthly costs total.")
    gross_profit: Optional[Any] = Field(description="Monthly gross profit.")
    expenses: Optional[Any] = Field(description="Monthly expenses.")
    ebitda: Optional[Any] = Field(description="Monthly earnings before interest, tax, depreciation and amortisation.")
    depreciation: Optional[Any] = Field(default=None, description="Monthly depreciation.")
    amortisation: Optional[Any] = Field(default=None, description="Monthly amortisation.")
    ebit: Optional[Any] = Field(description="Monthly earnings before interest and tax.")
    taxes: Optional[Any] = Field(description="Monthly taxes.")
    interests: Optional[Any] = Field(default=None, description="Can be shares or similar.")
    profit_loss: Optional[Any] = Field(description="Monthly profit and loss.")
    assets: Optional[Any] = Field(description="Monthly assets.")
    current_assets: Optional[Any] = Field(description="Short term assets.")
    liabilities: Optional[Any] = Field(description="Liabilities.")
    current_liabilities: Optional[Any] = Field(description="Short term liabilities.")
    shareholder_equity: Optional[Any] = Field(default=None, description="Share holder equity.")
    __properties: ClassVar[List[str]] = ["period_month", "revenue", "costs", "gross_profit", "expenses", "ebitda", "depreciation", "amortisation", "ebit", "taxes", "interests", "profit_loss", "assets", "current_assets", "liabilities", "current_liabilities", "shareholder_equity"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FinancialDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if period_month (nullable) is None
        # and model_fields_set contains the field
        if self.period_month is None and "period_month" in self.model_fields_set:
            _dict['period_month'] = None

        # set to None if revenue (nullable) is None
        # and model_fields_set contains the field
        if self.revenue is None and "revenue" in self.model_fields_set:
            _dict['revenue'] = None

        # set to None if costs (nullable) is None
        # and model_fields_set contains the field
        if self.costs is None and "costs" in self.model_fields_set:
            _dict['costs'] = None

        # set to None if gross_profit (nullable) is None
        # and model_fields_set contains the field
        if self.gross_profit is None and "gross_profit" in self.model_fields_set:
            _dict['gross_profit'] = None

        # set to None if expenses (nullable) is None
        # and model_fields_set contains the field
        if self.expenses is None and "expenses" in self.model_fields_set:
            _dict['expenses'] = None

        # set to None if ebitda (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda is None and "ebitda" in self.model_fields_set:
            _dict['ebitda'] = None

        # set to None if depreciation (nullable) is None
        # and model_fields_set contains the field
        if self.depreciation is None and "depreciation" in self.model_fields_set:
            _dict['depreciation'] = None

        # set to None if amortisation (nullable) is None
        # and model_fields_set contains the field
        if self.amortisation is None and "amortisation" in self.model_fields_set:
            _dict['amortisation'] = None

        # set to None if ebit (nullable) is None
        # and model_fields_set contains the field
        if self.ebit is None and "ebit" in self.model_fields_set:
            _dict['ebit'] = None

        # set to None if taxes (nullable) is None
        # and model_fields_set contains the field
        if self.taxes is None and "taxes" in self.model_fields_set:
            _dict['taxes'] = None

        # set to None if interests (nullable) is None
        # and model_fields_set contains the field
        if self.interests is None and "interests" in self.model_fields_set:
            _dict['interests'] = None

        # set to None if profit_loss (nullable) is None
        # and model_fields_set contains the field
        if self.profit_loss is None and "profit_loss" in self.model_fields_set:
            _dict['profit_loss'] = None

        # set to None if assets (nullable) is None
        # and model_fields_set contains the field
        if self.assets is None and "assets" in self.model_fields_set:
            _dict['assets'] = None

        # set to None if current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.current_assets is None and "current_assets" in self.model_fields_set:
            _dict['current_assets'] = None

        # set to None if liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.liabilities is None and "liabilities" in self.model_fields_set:
            _dict['liabilities'] = None

        # set to None if current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.current_liabilities is None and "current_liabilities" in self.model_fields_set:
            _dict['current_liabilities'] = None

        # set to None if shareholder_equity (nullable) is None
        # and model_fields_set contains the field
        if self.shareholder_equity is None and "shareholder_equity" in self.model_fields_set:
            _dict['shareholder_equity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FinancialDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_month": obj.get("period_month"),
            "revenue": obj.get("revenue"),
            "costs": obj.get("costs"),
            "gross_profit": obj.get("gross_profit"),
            "expenses": obj.get("expenses"),
            "ebitda": obj.get("ebitda"),
            "depreciation": obj.get("depreciation"),
            "amortisation": obj.get("amortisation"),
            "ebit": obj.get("ebit"),
            "taxes": obj.get("taxes"),
            "interests": obj.get("interests"),
            "profit_loss": obj.get("profit_loss"),
            "assets": obj.get("assets"),
            "current_assets": obj.get("current_assets"),
            "liabilities": obj.get("liabilities"),
            "current_liabilities": obj.get("current_liabilities"),
            "shareholder_equity": obj.get("shareholder_equity")
        })
        return _obj


