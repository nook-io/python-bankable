# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompanyDetails(BaseModel):
    """
    CompanyDetails
    """ # noqa: E501
    company_name: Optional[Any] = Field(description="Full company name.")
    registration_number: Optional[Any] = Field(description="Company registration number.")
    country_code: Optional[Any] = Field(description="ISO Country code (two letter country code from ISO 3166).")
    currency: Optional[Any] = Field(description="Currency which the company operates.")
    industry: Optional[Any] = Field(default=None, description="Industry SIC code.")
    company_type: Optional[Any] = Field(default=None, description="Company type LTD: Limited Company. UNLTD: Unlimited Company. LLP: Limited Liability Partnership. SOLE: Sole Trader. ")
    __properties: ClassVar[List[str]] = ["company_name", "registration_number", "country_code", "currency", "industry", "company_type"]

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EUR', 'GBP'):
            raise ValueError("must be one of enum values ('EUR', 'GBP')")
        return value

    @field_validator('company_type')
    def company_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LTD', 'UNLTD', 'LLP', 'SOLE'):
            raise ValueError("must be one of enum values ('LTD', 'UNLTD', 'LLP', 'SOLE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompanyDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['company_name'] = None

        # set to None if registration_number (nullable) is None
        # and model_fields_set contains the field
        if self.registration_number is None and "registration_number" in self.model_fields_set:
            _dict['registration_number'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['country_code'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if industry (nullable) is None
        # and model_fields_set contains the field
        if self.industry is None and "industry" in self.model_fields_set:
            _dict['industry'] = None

        # set to None if company_type (nullable) is None
        # and model_fields_set contains the field
        if self.company_type is None and "company_type" in self.model_fields_set:
            _dict['company_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompanyDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "company_name": obj.get("company_name"),
            "registration_number": obj.get("registration_number"),
            "country_code": obj.get("country_code"),
            "currency": obj.get("currency"),
            "industry": obj.get("industry"),
            "company_type": obj.get("company_type")
        })
        return _obj


