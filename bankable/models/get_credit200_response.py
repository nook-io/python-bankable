# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from bankable.models.get_credit200_response_client import GetCredit200ResponseClient
from bankable.models.get_credit200_response_credit import GetCredit200ResponseCredit
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCredit200Response(BaseModel):
    """
    GetCredit200Response
    """ # noqa: E501
    credit: Optional[GetCredit200ResponseCredit] = None
    client: Optional[GetCredit200ResponseClient] = None
    installments: Optional[Any] = Field(default=None, description="List of instalments.")
    __properties: ClassVar[List[str]] = ["credit", "client", "installments"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCredit200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credit
        if self.credit:
            _dict['credit'] = self.credit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # set to None if installments (nullable) is None
        # and model_fields_set contains the field
        if self.installments is None and "installments" in self.model_fields_set:
            _dict['installments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCredit200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credit": GetCredit200ResponseCredit.from_dict(obj.get("credit")) if obj.get("credit") is not None else None,
            "client": GetCredit200ResponseClient.from_dict(obj.get("client")) if obj.get("client") is not None else None,
            "installments": obj.get("installments")
        })
        return _obj


