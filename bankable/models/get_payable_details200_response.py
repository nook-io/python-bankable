# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetPayableDetails200Response(BaseModel):
    """
    GetPayableDetails200Response
    """ # noqa: E501
    id: Optional[Any] = Field(default=None, description="Payable request ID provided by Bankable.")
    created_at: Optional[Any] = Field(default=None, description="Timestamp of the payable request creation in RFC3339 format.")
    updated_at: Optional[Any] = Field(default=None, description="Timestamp of the last update in RFC3339 format.")
    state: Optional[Any] = Field(default=None, description="Current status of the payable request.")
    reject_reason: Optional[Any] = Field(default=None, description="The rejection reason for the payable request.")
    decline_reason: Optional[Any] = Field(default=None, description="The decline reason provided by the client.")
    total_requested_amount: Optional[Any] = Field(default=None, description="The total amount of the payable financing request.")
    currency: Optional[Any] = Field(default=None, description="The currency can be either EUR or GBP.")
    invoice_payable_count: Optional[Any] = Field(default=None, description="The total number of payables part of the financing request.")
    instalments_count: Optional[Any] = Field(default=None, description="The total number of instalments that will be required to repay the credit. The maximum values are 51 for weekly and 11 for monthly instalments.")
    repayment_method: Optional[Any] = Field(default=None, description="If the repayment plan is in weekly or monthly instalments.")
    annual_interest_rate: Optional[Any] = Field(default=None, description="The annual interest rate applied to the outstanding loan principal as a periodic interest rate calculated monthly or weekly based on the selected repayment method.")
    fees_rate: Optional[Any] = Field(default=None, description="The fees percentage that is applied to the total financing amount and charged once as part of the first repayment instalment.")
    total_repayment_amount: Optional[Any] = Field(default=None, description="The total amount that the client will need to pay back, including total_fees_amount.")
    total_interest_amount: Optional[Any] = Field(default=None, description="The total amount of interest that will be charged for the financing.")
    total_fees_amount: Optional[Any] = Field(default=None, description="The total amount of fees that will be charged for the financing.")
    instalments: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "updated_at", "state", "reject_reason", "decline_reason", "total_requested_amount", "currency", "invoice_payable_count", "instalments_count", "repayment_method", "annual_interest_rate", "fees_rate", "total_repayment_amount", "total_interest_amount", "total_fees_amount", "instalments"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SUBMITTED', 'PRE-APPROVED', 'CANCELLED', 'APPROVED', 'REJECTED', 'FINANCED', 'OVERDUE', 'DELINQUENT', 'DEFAULTED', 'WRITTEN_OFF'):
            raise ValueError("must be one of enum values ('SUBMITTED', 'PRE-APPROVED', 'CANCELLED', 'APPROVED', 'REJECTED', 'FINANCED', 'OVERDUE', 'DELINQUENT', 'DEFAULTED', 'WRITTEN_OFF')")
        return value

    @field_validator('reject_reason')
    def reject_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LIMIT_EXCEEDED', 'INVALID_PAYABLES', 'RISK_ASSESSMENT', 'COMPANY_STATUS_CHANGED', 'OTHER'):
            raise ValueError("must be one of enum values ('LIMIT_EXCEEDED', 'INVALID_PAYABLES', 'RISK_ASSESSMENT', 'COMPANY_STATUS_CHANGED', 'OTHER')")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EUR', 'GBP'):
            raise ValueError("must be one of enum values ('EUR', 'GBP')")
        return value

    @field_validator('repayment_method')
    def repayment_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('weekly_instalments', 'monthly_instalments'):
            raise ValueError("must be one of enum values ('weekly_instalments', 'monthly_instalments')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetPayableDetails200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if reject_reason (nullable) is None
        # and model_fields_set contains the field
        if self.reject_reason is None and "reject_reason" in self.model_fields_set:
            _dict['reject_reason'] = None

        # set to None if decline_reason (nullable) is None
        # and model_fields_set contains the field
        if self.decline_reason is None and "decline_reason" in self.model_fields_set:
            _dict['decline_reason'] = None

        # set to None if total_requested_amount (nullable) is None
        # and model_fields_set contains the field
        if self.total_requested_amount is None and "total_requested_amount" in self.model_fields_set:
            _dict['total_requested_amount'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if invoice_payable_count (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_payable_count is None and "invoice_payable_count" in self.model_fields_set:
            _dict['invoice_payable_count'] = None

        # set to None if instalments_count (nullable) is None
        # and model_fields_set contains the field
        if self.instalments_count is None and "instalments_count" in self.model_fields_set:
            _dict['instalments_count'] = None

        # set to None if repayment_method (nullable) is None
        # and model_fields_set contains the field
        if self.repayment_method is None and "repayment_method" in self.model_fields_set:
            _dict['repayment_method'] = None

        # set to None if annual_interest_rate (nullable) is None
        # and model_fields_set contains the field
        if self.annual_interest_rate is None and "annual_interest_rate" in self.model_fields_set:
            _dict['annual_interest_rate'] = None

        # set to None if fees_rate (nullable) is None
        # and model_fields_set contains the field
        if self.fees_rate is None and "fees_rate" in self.model_fields_set:
            _dict['fees_rate'] = None

        # set to None if total_repayment_amount (nullable) is None
        # and model_fields_set contains the field
        if self.total_repayment_amount is None and "total_repayment_amount" in self.model_fields_set:
            _dict['total_repayment_amount'] = None

        # set to None if total_interest_amount (nullable) is None
        # and model_fields_set contains the field
        if self.total_interest_amount is None and "total_interest_amount" in self.model_fields_set:
            _dict['total_interest_amount'] = None

        # set to None if total_fees_amount (nullable) is None
        # and model_fields_set contains the field
        if self.total_fees_amount is None and "total_fees_amount" in self.model_fields_set:
            _dict['total_fees_amount'] = None

        # set to None if instalments (nullable) is None
        # and model_fields_set contains the field
        if self.instalments is None and "instalments" in self.model_fields_set:
            _dict['instalments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetPayableDetails200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "state": obj.get("state"),
            "reject_reason": obj.get("reject_reason"),
            "decline_reason": obj.get("decline_reason"),
            "total_requested_amount": obj.get("total_requested_amount"),
            "currency": obj.get("currency"),
            "invoice_payable_count": obj.get("invoice_payable_count"),
            "instalments_count": obj.get("instalments_count"),
            "repayment_method": obj.get("repayment_method"),
            "annual_interest_rate": obj.get("annual_interest_rate"),
            "fees_rate": obj.get("fees_rate"),
            "total_repayment_amount": obj.get("total_repayment_amount"),
            "total_interest_amount": obj.get("total_interest_amount"),
            "total_fees_amount": obj.get("total_fees_amount"),
            "instalments": obj.get("instalments")
        })
        return _obj


