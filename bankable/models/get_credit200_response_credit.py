# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCredit200ResponseCredit(BaseModel):
    """
    Details of the credit.
    """ # noqa: E501
    id: Optional[Any] = Field(default=None, description="Credit ID provided by Bankable.")
    created_at: Optional[Any] = Field(default=None, description="Timestamp of the Credit creation in RFC3339 format.")
    updated_at: Optional[Any] = Field(default=None, description="Timestamp of the last update in RFC3339 format.")
    number: Optional[Any] = Field(default=None, description="The Credit number provided by Bankable.")
    state: Optional[Any] = Field(default=None, description="The current payment status for the credit.")
    installments_count: Optional[Any] = Field(default=None, description="Requested number of instalments.")
    requested_amount: Optional[Any] = Field(default=None, description="Requested credit amount.")
    currency: Optional[Any] = Field(default=None, description="The currency can be either EUR or GBP.")
    evaluation_passed: Optional[Any] = Field(default=None, description="Evaluation result is based on the automatic underwriting model and it can be either true or false.")
    maximum_limit_exceeded: Optional[Any] = Field(default=None, description="If the requested amount exceeds the maximum limit account, this value will be true, otherwise false.")
    isin: Optional[Any] = Field(default=None, description="International Securities Identification Number (ISIN) of the ETC.")
    __properties: ClassVar[List[str]] = ["id", "created_at", "updated_at", "number", "state", "installments_count", "requested_amount", "currency", "evaluation_passed", "maximum_limit_exceeded", "isin"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EVALUATION_OK', 'EVALUATION_NOK', 'PRE_APPROVED', 'DECLINED', 'EXPIRED', 'APPROVED', 'REJECTED', 'CANCELLED', 'FINANCED', 'OVERDUE', 'DELINQUENT', 'DEFAULTED', 'WRITTEN_OFF', 'SETTLED'):
            raise ValueError("must be one of enum values ('EVALUATION_OK', 'EVALUATION_NOK', 'PRE_APPROVED', 'DECLINED', 'EXPIRED', 'APPROVED', 'REJECTED', 'CANCELLED', 'FINANCED', 'OVERDUE', 'DELINQUENT', 'DEFAULTED', 'WRITTEN_OFF', 'SETTLED')")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EUR', 'GBP'):
            raise ValueError("must be one of enum values ('EUR', 'GBP')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCredit200ResponseCredit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if installments_count (nullable) is None
        # and model_fields_set contains the field
        if self.installments_count is None and "installments_count" in self.model_fields_set:
            _dict['installments_count'] = None

        # set to None if requested_amount (nullable) is None
        # and model_fields_set contains the field
        if self.requested_amount is None and "requested_amount" in self.model_fields_set:
            _dict['requested_amount'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if evaluation_passed (nullable) is None
        # and model_fields_set contains the field
        if self.evaluation_passed is None and "evaluation_passed" in self.model_fields_set:
            _dict['evaluation_passed'] = None

        # set to None if maximum_limit_exceeded (nullable) is None
        # and model_fields_set contains the field
        if self.maximum_limit_exceeded is None and "maximum_limit_exceeded" in self.model_fields_set:
            _dict['maximum_limit_exceeded'] = None

        # set to None if isin (nullable) is None
        # and model_fields_set contains the field
        if self.isin is None and "isin" in self.model_fields_set:
            _dict['isin'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCredit200ResponseCredit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "number": obj.get("number"),
            "state": obj.get("state"),
            "installments_count": obj.get("installments_count"),
            "requested_amount": obj.get("requested_amount"),
            "currency": obj.get("currency"),
            "evaluation_passed": obj.get("evaluation_passed"),
            "maximum_limit_exceeded": obj.get("maximum_limit_exceeded"),
            "isin": obj.get("isin")
        })
        return _obj


