# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCreditPriceBreakdown200Response(BaseModel):
    """
    GetCreditPriceBreakdown200Response
    """ # noqa: E501
    evaluation_ok: Optional[Any] = Field(default=None, description="Whether the credit request has been approved or not.")
    expiration_date: Optional[Any] = Field(default=None, description="The date at which the credit offer will expire. After this date, the offer will no longer be valid and the client will need to request pricing for a new credit.")
    score: Optional[Any] = Field(default=None, description="Internal credit score (0-100) used to define pricing. Based on the financial data of the client.")
    min_annual_percentage_rate: Optional[Any] = Field(default=None, description="The minimum annual percentage rate (APR). Obtainable by requesting any financing option with the maximum amount of instalments offered.")
    max_annual_percentage_rate: Optional[Any] = Field(default=None, description="The maximum annual percentage rate (APR). Obtainable by requesting any financing option with the minimum amount of instalments offered.")
    matrix: Optional[Any] = Field(default=None, description="Contains information for the different credit amounts and durations.")
    __properties: ClassVar[List[str]] = ["evaluation_ok", "expiration_date", "score", "min_annual_percentage_rate", "max_annual_percentage_rate", "matrix"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCreditPriceBreakdown200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if evaluation_ok (nullable) is None
        # and model_fields_set contains the field
        if self.evaluation_ok is None and "evaluation_ok" in self.model_fields_set:
            _dict['evaluation_ok'] = None

        # set to None if expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_date is None and "expiration_date" in self.model_fields_set:
            _dict['expiration_date'] = None

        # set to None if score (nullable) is None
        # and model_fields_set contains the field
        if self.score is None and "score" in self.model_fields_set:
            _dict['score'] = None

        # set to None if min_annual_percentage_rate (nullable) is None
        # and model_fields_set contains the field
        if self.min_annual_percentage_rate is None and "min_annual_percentage_rate" in self.model_fields_set:
            _dict['min_annual_percentage_rate'] = None

        # set to None if max_annual_percentage_rate (nullable) is None
        # and model_fields_set contains the field
        if self.max_annual_percentage_rate is None and "max_annual_percentage_rate" in self.model_fields_set:
            _dict['max_annual_percentage_rate'] = None

        # set to None if matrix (nullable) is None
        # and model_fields_set contains the field
        if self.matrix is None and "matrix" in self.model_fields_set:
            _dict['matrix'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCreditPriceBreakdown200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "evaluation_ok": obj.get("evaluation_ok"),
            "expiration_date": obj.get("expiration_date"),
            "score": obj.get("score"),
            "min_annual_percentage_rate": obj.get("min_annual_percentage_rate"),
            "max_annual_percentage_rate": obj.get("max_annual_percentage_rate"),
            "matrix": obj.get("matrix")
        })
        return _obj


