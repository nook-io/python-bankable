# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr, field_validator

from typing import Any, Optional

from bankable.models.cancel_credit200_response import CancelCredit200Response
from bankable.models.create_credit201_response import CreateCredit201Response
from bankable.models.find_credits200_response import FindCredits200Response
from bankable.models.get_credit200_response import GetCredit200Response
from bankable.models.get_credit_price_breakdown200_response import GetCreditPriceBreakdown200Response

from bankable.api_client import ApiClient
from bankable.api_response import ApiResponse
from bankable.rest import RESTResponseType


class CreditApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cancel_credit(
        self,
        id: Annotated[Any, Field(description="This is the Credit ID provided by Bankable when the Credit was created (see the \"Create Credit\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CancelCredit200Response:
        """Cancel Credit

        This endpoint allows cancelling a submitted credit request that Bankable still needs to approve for financing.

        :param id: This is the Credit ID provided by Bankable when the Credit was created (see the \"Create Credit\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_credit_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelCredit200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_credit_with_http_info(
        self,
        id: Annotated[Any, Field(description="This is the Credit ID provided by Bankable when the Credit was created (see the \"Create Credit\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CancelCredit200Response]:
        """Cancel Credit

        This endpoint allows cancelling a submitted credit request that Bankable still needs to approve for financing.

        :param id: This is the Credit ID provided by Bankable when the Credit was created (see the \"Create Credit\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_credit_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelCredit200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_credit_without_preload_content(
        self,
        id: Annotated[Any, Field(description="This is the Credit ID provided by Bankable when the Credit was created (see the \"Create Credit\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Credit

        This endpoint allows cancelling a submitted credit request that Bankable still needs to approve for financing.

        :param id: This is the Credit ID provided by Bankable when the Credit was created (see the \"Create Credit\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_credit_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelCredit200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_credit_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/credit/{id}/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_credit(
        self,
        amount: Annotated[Optional[Any], Field(description="The credit amount can only include numbers and dot (.). For example, 100.00.")],
        installments: Annotated[Optional[Any], Field(description="The number of instalments should be a number higher than 0.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP.")],
        client_id: Annotated[Optional[Any], Field(description="The unique identifier for the client provided by Bankable.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateCredit201Response:
        """Submit Credit

        This endpoint allows submitting credit requests for financing.

        :param amount: The credit amount can only include numbers and dot (.). For example, 100.00. (required)
        :type amount: object
        :param installments: The number of instalments should be a number higher than 0. (required)
        :type installments: object
        :param currency: The currency must be either EUR or GBP. (required)
        :type currency: object
        :param client_id: The unique identifier for the client provided by Bankable. (required)
        :type client_id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_credit_serialize(
            amount=amount,
            installments=installments,
            currency=currency,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateCredit201Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_credit_with_http_info(
        self,
        amount: Annotated[Optional[Any], Field(description="The credit amount can only include numbers and dot (.). For example, 100.00.")],
        installments: Annotated[Optional[Any], Field(description="The number of instalments should be a number higher than 0.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP.")],
        client_id: Annotated[Optional[Any], Field(description="The unique identifier for the client provided by Bankable.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateCredit201Response]:
        """Submit Credit

        This endpoint allows submitting credit requests for financing.

        :param amount: The credit amount can only include numbers and dot (.). For example, 100.00. (required)
        :type amount: object
        :param installments: The number of instalments should be a number higher than 0. (required)
        :type installments: object
        :param currency: The currency must be either EUR or GBP. (required)
        :type currency: object
        :param client_id: The unique identifier for the client provided by Bankable. (required)
        :type client_id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_credit_serialize(
            amount=amount,
            installments=installments,
            currency=currency,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateCredit201Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_credit_without_preload_content(
        self,
        amount: Annotated[Optional[Any], Field(description="The credit amount can only include numbers and dot (.). For example, 100.00.")],
        installments: Annotated[Optional[Any], Field(description="The number of instalments should be a number higher than 0.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP.")],
        client_id: Annotated[Optional[Any], Field(description="The unique identifier for the client provided by Bankable.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit Credit

        This endpoint allows submitting credit requests for financing.

        :param amount: The credit amount can only include numbers and dot (.). For example, 100.00. (required)
        :type amount: object
        :param installments: The number of instalments should be a number higher than 0. (required)
        :type installments: object
        :param currency: The currency must be either EUR or GBP. (required)
        :type currency: object
        :param client_id: The unique identifier for the client provided by Bankable. (required)
        :type client_id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_credit_serialize(
            amount=amount,
            installments=installments,
            currency=currency,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateCredit201Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_credit_serialize(
        self,
        amount,
        installments,
        currency,
        client_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if amount is not None:
            _form_params.append(('amount', amount))
        if installments is not None:
            _form_params.append(('installments', installments))
        if currency is not None:
            _form_params.append(('currency', currency))
        if client_id is not None:
            _form_params.append(('client_id', client_id))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/credit',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_credits(
        self,
        limit: Annotated[Optional[Any], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[Any], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[Any], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit IDs. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit number. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit states. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        amount_from: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by amount value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        amount_to: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by amount value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        installments: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by the number of instalments given.")] = None,
        client_id: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FindCredits200Response:
        """List Credits

        This endpoint allows retrieving a paginated list of credits, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: object
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: object
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: object
        :param id: Use to filter the credits list by a collection of credit IDs. You must use this filter by adding multiple times this query parameter with different values.
        :type id: str
        :param number: Use to filter the credits list by a collection of credit number. You must use this filter by adding multiple times this query parameter with different values.
        :type number: str
        :param state: Use to filter the credits list by a collection of credit states. You must use this filter by adding multiple times this query parameter with different values.
        :type state: str
        :param amount_from: Use to filter the credits list by amount value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type amount_from: str
        :param amount_to: Use to filter the credits list by amount value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type amount_to: str
        :param currency: Use to filter the credits list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency: str
        :param installments: Use to filter the credits list by the number of instalments given.
        :type installments: str
        :param client_id: Use to filter the credits list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_credits_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            id=id,
            number=number,
            state=state,
            amount_from=amount_from,
            amount_to=amount_to,
            currency=currency,
            installments=installments,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindCredits200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_credits_with_http_info(
        self,
        limit: Annotated[Optional[Any], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[Any], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[Any], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit IDs. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit number. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit states. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        amount_from: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by amount value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        amount_to: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by amount value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        installments: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by the number of instalments given.")] = None,
        client_id: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FindCredits200Response]:
        """List Credits

        This endpoint allows retrieving a paginated list of credits, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: object
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: object
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: object
        :param id: Use to filter the credits list by a collection of credit IDs. You must use this filter by adding multiple times this query parameter with different values.
        :type id: str
        :param number: Use to filter the credits list by a collection of credit number. You must use this filter by adding multiple times this query parameter with different values.
        :type number: str
        :param state: Use to filter the credits list by a collection of credit states. You must use this filter by adding multiple times this query parameter with different values.
        :type state: str
        :param amount_from: Use to filter the credits list by amount value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type amount_from: str
        :param amount_to: Use to filter the credits list by amount value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type amount_to: str
        :param currency: Use to filter the credits list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency: str
        :param installments: Use to filter the credits list by the number of instalments given.
        :type installments: str
        :param client_id: Use to filter the credits list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_credits_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            id=id,
            number=number,
            state=state,
            amount_from=amount_from,
            amount_to=amount_to,
            currency=currency,
            installments=installments,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindCredits200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_credits_without_preload_content(
        self,
        limit: Annotated[Optional[Any], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[Any], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[Any], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit IDs. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit number. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of credit states. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        amount_from: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by amount value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        amount_to: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by amount value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        installments: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by the number of instalments given.")] = None,
        client_id: Annotated[Optional[StrictStr], Field(description="Use to filter the credits list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Credits

        This endpoint allows retrieving a paginated list of credits, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: object
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: object
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: object
        :param id: Use to filter the credits list by a collection of credit IDs. You must use this filter by adding multiple times this query parameter with different values.
        :type id: str
        :param number: Use to filter the credits list by a collection of credit number. You must use this filter by adding multiple times this query parameter with different values.
        :type number: str
        :param state: Use to filter the credits list by a collection of credit states. You must use this filter by adding multiple times this query parameter with different values.
        :type state: str
        :param amount_from: Use to filter the credits list by amount value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type amount_from: str
        :param amount_to: Use to filter the credits list by amount value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type amount_to: str
        :param currency: Use to filter the credits list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency: str
        :param installments: Use to filter the credits list by the number of instalments given.
        :type installments: str
        :param client_id: Use to filter the credits list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_credits_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            id=id,
            number=number,
            state=state,
            amount_from=amount_from,
            amount_to=amount_to,
            currency=currency,
            installments=installments,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindCredits200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_credits_serialize(
        self,
        limit,
        offset,
        sort_by,
        descending,
        id,
        number,
        state,
        amount_from,
        amount_to,
        currency,
        installments,
        client_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if descending is not None:
            
            _query_params.append(('descending', descending))
            
        if id is not None:
            
            _query_params.append(('id[]', id))
            
        if number is not None:
            
            _query_params.append(('number[]', number))
            
        if state is not None:
            
            _query_params.append(('state[]', state))
            
        if amount_from is not None:
            
            _query_params.append(('amount_from', amount_from))
            
        if amount_to is not None:
            
            _query_params.append(('amount_to', amount_to))
            
        if currency is not None:
            
            _query_params.append(('currency[]', currency))
            
        if installments is not None:
            
            _query_params.append(('installments', installments))
            
        if client_id is not None:
            
            _query_params.append(('client_id[]', client_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/credits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_credit(
        self,
        id: Annotated[Any, Field(description="This is the Credit ID provided by Bankable when the credit was created (see the \"Create Credit\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCredit200Response:
        """Get Credit Details

        This endpoint allows obtaining the current status and details of a credit.

        :param id: This is the Credit ID provided by Bankable when the credit was created (see the \"Create Credit\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_credit_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCredit200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_credit_with_http_info(
        self,
        id: Annotated[Any, Field(description="This is the Credit ID provided by Bankable when the credit was created (see the \"Create Credit\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCredit200Response]:
        """Get Credit Details

        This endpoint allows obtaining the current status and details of a credit.

        :param id: This is the Credit ID provided by Bankable when the credit was created (see the \"Create Credit\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_credit_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCredit200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_credit_without_preload_content(
        self,
        id: Annotated[Any, Field(description="This is the Credit ID provided by Bankable when the credit was created (see the \"Create Credit\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Credit Details

        This endpoint allows obtaining the current status and details of a credit.

        :param id: This is the Credit ID provided by Bankable when the credit was created (see the \"Create Credit\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_credit_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCredit200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_credit_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/credit/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_credit_price_breakdown(
        self,
        country: Annotated[StrictStr, Field(description="ISO Country Code (two letter country code from ISO 3166).")],
        registration_number: Annotated[StrictStr, Field(description="Company registration number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCreditPriceBreakdown200Response:
        """Get Credit Price Breakdown

        This endpoint allows obtaining the price breakdown for multiple instalment and credit amount combinations after submitting financial data and before submitting a new credit request.

        :param country: ISO Country Code (two letter country code from ISO 3166). (required)
        :type country: str
        :param registration_number: Company registration number. (required)
        :type registration_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_credit_price_breakdown_serialize(
            country=country,
            registration_number=registration_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCreditPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_credit_price_breakdown_with_http_info(
        self,
        country: Annotated[StrictStr, Field(description="ISO Country Code (two letter country code from ISO 3166).")],
        registration_number: Annotated[StrictStr, Field(description="Company registration number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCreditPriceBreakdown200Response]:
        """Get Credit Price Breakdown

        This endpoint allows obtaining the price breakdown for multiple instalment and credit amount combinations after submitting financial data and before submitting a new credit request.

        :param country: ISO Country Code (two letter country code from ISO 3166). (required)
        :type country: str
        :param registration_number: Company registration number. (required)
        :type registration_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_credit_price_breakdown_serialize(
            country=country,
            registration_number=registration_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCreditPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_credit_price_breakdown_without_preload_content(
        self,
        country: Annotated[StrictStr, Field(description="ISO Country Code (two letter country code from ISO 3166).")],
        registration_number: Annotated[StrictStr, Field(description="Company registration number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Credit Price Breakdown

        This endpoint allows obtaining the price breakdown for multiple instalment and credit amount combinations after submitting financial data and before submitting a new credit request.

        :param country: ISO Country Code (two letter country code from ISO 3166). (required)
        :type country: str
        :param registration_number: Company registration number. (required)
        :type registration_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_credit_price_breakdown_serialize(
            country=country,
            registration_number=registration_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCreditPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_credit_price_breakdown_serialize(
        self,
        country,
        registration_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country is not None:
            
            _query_params.append(('country', country))
            
        if registration_number is not None:
            
            _query_params.append(('registration_number', registration_number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/credit/price-breakdown',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


