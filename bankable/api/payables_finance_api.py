# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr, field_validator

from typing import Any, Optional

from bankable.models.find_payables200_response import FindPayables200Response
from bankable.models.get_payable_details200_response import GetPayableDetails200Response
from bankable.models.get_payables_price_breakdown200_response import GetPayablesPriceBreakdown200Response
from bankable.models.submit_payables200_response import SubmitPayables200Response

from bankable.api_client import ApiClient
from bankable.api_response import ApiResponse
from bankable.rest import RESTResponseType


class PayablesFinanceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def approve_repayment_plan(
        self,
        id: Annotated[StrictStr, Field(description="This is the Payable financing request ID provided by Bankable when the Payables were submitted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Approve Repayment Plan

        This endpoint allows the approval of the repayment plan for submitted payables.

        :param id: This is the Payable financing request ID provided by Bankable when the Payables were submitted (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._approve_repayment_plan_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def approve_repayment_plan_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="This is the Payable financing request ID provided by Bankable when the Payables were submitted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Approve Repayment Plan

        This endpoint allows the approval of the repayment plan for submitted payables.

        :param id: This is the Payable financing request ID provided by Bankable when the Payables were submitted (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._approve_repayment_plan_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def approve_repayment_plan_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="This is the Payable financing request ID provided by Bankable when the Payables were submitted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Approve Repayment Plan

        This endpoint allows the approval of the repayment plan for submitted payables.

        :param id: This is the Payable financing request ID provided by Bankable when the Payables were submitted (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._approve_repayment_plan_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _approve_repayment_plan_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/payables/{id}/approve',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def decline_repayment_plan(
        self,
        id: Annotated[Any, Field(description="This is the Payable financing request ID provided by Bankable when the Payables were submitted")],
        decline_reason: Annotated[StrictStr, Field(description="The reason for declining the financing request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Decline Repayment Plan

        This endpoint allows declining the repayment plan for submitted payables.

        :param id: This is the Payable financing request ID provided by Bankable when the Payables were submitted (required)
        :type id: object
        :param decline_reason: The reason for declining the financing request (required)
        :type decline_reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._decline_repayment_plan_serialize(
            id=id,
            decline_reason=decline_reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def decline_repayment_plan_with_http_info(
        self,
        id: Annotated[Any, Field(description="This is the Payable financing request ID provided by Bankable when the Payables were submitted")],
        decline_reason: Annotated[StrictStr, Field(description="The reason for declining the financing request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Decline Repayment Plan

        This endpoint allows declining the repayment plan for submitted payables.

        :param id: This is the Payable financing request ID provided by Bankable when the Payables were submitted (required)
        :type id: object
        :param decline_reason: The reason for declining the financing request (required)
        :type decline_reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._decline_repayment_plan_serialize(
            id=id,
            decline_reason=decline_reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def decline_repayment_plan_without_preload_content(
        self,
        id: Annotated[Any, Field(description="This is the Payable financing request ID provided by Bankable when the Payables were submitted")],
        decline_reason: Annotated[StrictStr, Field(description="The reason for declining the financing request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Decline Repayment Plan

        This endpoint allows declining the repayment plan for submitted payables.

        :param id: This is the Payable financing request ID provided by Bankable when the Payables were submitted (required)
        :type id: object
        :param decline_reason: The reason for declining the financing request (required)
        :type decline_reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._decline_repayment_plan_serialize(
            id=id,
            decline_reason=decline_reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _decline_repayment_plan_serialize(
        self,
        id,
        decline_reason,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if decline_reason is not None:
            
            _query_params.append(('decline_reason', decline_reason))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/payables/{id}/decline',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_payables(
        self,
        limit: Annotated[Optional[Any], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[Any], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[Any], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Use to filter the payable list by a collection of payable financing request IDs. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        state: Annotated[Optional[Any], Field(description="Use to filter the payable request list by a collection of payable financing request states. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        client_id: Annotated[Optional[Any], Field(description="Use to filter the payable request list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        total_requested_amount_from: Annotated[Optional[Any], Field(description="Use to filter the payable request list by amount value greater than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 100.00.")] = None,
        total_requested_amount_to: Annotated[Optional[Any], Field(description="Use to filter the payable request list by amount value less than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 200.00.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the payable request list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FindPayables200Response:
        """List Payables

        This endpoint allows retrieving a paginated list of payable financing requests, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: object
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: object
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: object
        :param id: Use to filter the payable list by a collection of payable financing request IDs. You must use this filter by adding multiple times this query parameter with different values.
        :type id: str
        :param state: Use to filter the payable request list by a collection of payable financing request states. You must use this filter by adding multiple times this query parameter with different values.
        :type state: object
        :param client_id: Use to filter the payable request list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type client_id: object
        :param total_requested_amount_from: Use to filter the payable request list by amount value greater than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 100.00.
        :type total_requested_amount_from: object
        :param total_requested_amount_to: Use to filter the payable request list by amount value less than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 200.00.
        :type total_requested_amount_to: object
        :param currency: Use to filter the payable request list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_payables_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            id=id,
            state=state,
            client_id=client_id,
            total_requested_amount_from=total_requested_amount_from,
            total_requested_amount_to=total_requested_amount_to,
            currency=currency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPayables200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_payables_with_http_info(
        self,
        limit: Annotated[Optional[Any], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[Any], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[Any], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Use to filter the payable list by a collection of payable financing request IDs. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        state: Annotated[Optional[Any], Field(description="Use to filter the payable request list by a collection of payable financing request states. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        client_id: Annotated[Optional[Any], Field(description="Use to filter the payable request list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        total_requested_amount_from: Annotated[Optional[Any], Field(description="Use to filter the payable request list by amount value greater than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 100.00.")] = None,
        total_requested_amount_to: Annotated[Optional[Any], Field(description="Use to filter the payable request list by amount value less than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 200.00.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the payable request list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FindPayables200Response]:
        """List Payables

        This endpoint allows retrieving a paginated list of payable financing requests, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: object
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: object
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: object
        :param id: Use to filter the payable list by a collection of payable financing request IDs. You must use this filter by adding multiple times this query parameter with different values.
        :type id: str
        :param state: Use to filter the payable request list by a collection of payable financing request states. You must use this filter by adding multiple times this query parameter with different values.
        :type state: object
        :param client_id: Use to filter the payable request list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type client_id: object
        :param total_requested_amount_from: Use to filter the payable request list by amount value greater than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 100.00.
        :type total_requested_amount_from: object
        :param total_requested_amount_to: Use to filter the payable request list by amount value less than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 200.00.
        :type total_requested_amount_to: object
        :param currency: Use to filter the payable request list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_payables_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            id=id,
            state=state,
            client_id=client_id,
            total_requested_amount_from=total_requested_amount_from,
            total_requested_amount_to=total_requested_amount_to,
            currency=currency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPayables200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_payables_without_preload_content(
        self,
        limit: Annotated[Optional[Any], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[Any], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[Any], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Use to filter the payable list by a collection of payable financing request IDs. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        state: Annotated[Optional[Any], Field(description="Use to filter the payable request list by a collection of payable financing request states. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        client_id: Annotated[Optional[Any], Field(description="Use to filter the payable request list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        total_requested_amount_from: Annotated[Optional[Any], Field(description="Use to filter the payable request list by amount value greater than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 100.00.")] = None,
        total_requested_amount_to: Annotated[Optional[Any], Field(description="Use to filter the payable request list by amount value less than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 200.00.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the payable request list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Payables

        This endpoint allows retrieving a paginated list of payable financing requests, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: object
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: object
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: object
        :param id: Use to filter the payable list by a collection of payable financing request IDs. You must use this filter by adding multiple times this query parameter with different values.
        :type id: str
        :param state: Use to filter the payable request list by a collection of payable financing request states. You must use this filter by adding multiple times this query parameter with different values.
        :type state: object
        :param client_id: Use to filter the payable request list by a collection of client IDs. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type client_id: object
        :param total_requested_amount_from: Use to filter the payable request list by amount value greater than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 100.00.
        :type total_requested_amount_from: object
        :param total_requested_amount_to: Use to filter the payable request list by amount value less than the given one. The amount can only include numbers and dot (.), and it must be presented in (EUR) or pence (GBP). For example, 200.00.
        :type total_requested_amount_to: object
        :param currency: Use to filter the payable request list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_payables_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            id=id,
            state=state,
            client_id=client_id,
            total_requested_amount_from=total_requested_amount_from,
            total_requested_amount_to=total_requested_amount_to,
            currency=currency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPayables200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_payables_serialize(
        self,
        limit,
        offset,
        sort_by,
        descending,
        id,
        state,
        client_id,
        total_requested_amount_from,
        total_requested_amount_to,
        currency,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if descending is not None:
            
            _query_params.append(('descending', descending))
            
        if id is not None:
            
            _query_params.append(('id[]', id))
            
        if state is not None:
            
            _query_params.append(('state[]', state))
            
        if client_id is not None:
            
            _query_params.append(('client_id[]', client_id))
            
        if total_requested_amount_from is not None:
            
            _query_params.append(('total_requested_amount_from', total_requested_amount_from))
            
        if total_requested_amount_to is not None:
            
            _query_params.append(('total_requested_amount_to', total_requested_amount_to))
            
        if currency is not None:
            
            _query_params.append(('currency[]', currency))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/payables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_payable_details(
        self,
        id: Annotated[Any, Field(description="This is the ID provided by Bankable when the payable was created (see the \"Submit Payables\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPayableDetails200Response:
        """Get Payable Details

        Use this endpoint to retrieve the status, details, and repayment plan of a payable financing request.

        :param id: This is the ID provided by Bankable when the payable was created (see the \"Submit Payables\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payable_details_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayableDetails200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_payable_details_with_http_info(
        self,
        id: Annotated[Any, Field(description="This is the ID provided by Bankable when the payable was created (see the \"Submit Payables\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPayableDetails200Response]:
        """Get Payable Details

        Use this endpoint to retrieve the status, details, and repayment plan of a payable financing request.

        :param id: This is the ID provided by Bankable when the payable was created (see the \"Submit Payables\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payable_details_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayableDetails200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_payable_details_without_preload_content(
        self,
        id: Annotated[Any, Field(description="This is the ID provided by Bankable when the payable was created (see the \"Submit Payables\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payable Details

        Use this endpoint to retrieve the status, details, and repayment plan of a payable financing request.

        :param id: This is the ID provided by Bankable when the payable was created (see the \"Submit Payables\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payable_details_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayableDetails200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_payable_details_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/payables/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_payables_price_breakdown(
        self,
        id: Annotated[StrictStr, Field(description="The unique identifier for the client provided by Bankable.")],
        financing_amount: Annotated[Any, Field(description="The total amount that a Client desires to finance (1 or more payables).")],
        repayment_method: Annotated[Any, Field(description="Whether a Client wants to repay the financing in weekly or monthly instalments.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPayablesPriceBreakdown200Response:
        """Get Payables Finance Price Breakdown

        This endpoint allows obtaining a price breakdown before financing payables.

        :param id: The unique identifier for the client provided by Bankable. (required)
        :type id: str
        :param financing_amount: The total amount that a Client desires to finance (1 or more payables). (required)
        :type financing_amount: object
        :param repayment_method: Whether a Client wants to repay the financing in weekly or monthly instalments. (required)
        :type repayment_method: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payables_price_breakdown_serialize(
            id=id,
            financing_amount=financing_amount,
            repayment_method=repayment_method,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayablesPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_payables_price_breakdown_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The unique identifier for the client provided by Bankable.")],
        financing_amount: Annotated[Any, Field(description="The total amount that a Client desires to finance (1 or more payables).")],
        repayment_method: Annotated[Any, Field(description="Whether a Client wants to repay the financing in weekly or monthly instalments.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPayablesPriceBreakdown200Response]:
        """Get Payables Finance Price Breakdown

        This endpoint allows obtaining a price breakdown before financing payables.

        :param id: The unique identifier for the client provided by Bankable. (required)
        :type id: str
        :param financing_amount: The total amount that a Client desires to finance (1 or more payables). (required)
        :type financing_amount: object
        :param repayment_method: Whether a Client wants to repay the financing in weekly or monthly instalments. (required)
        :type repayment_method: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payables_price_breakdown_serialize(
            id=id,
            financing_amount=financing_amount,
            repayment_method=repayment_method,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayablesPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_payables_price_breakdown_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The unique identifier for the client provided by Bankable.")],
        financing_amount: Annotated[Any, Field(description="The total amount that a Client desires to finance (1 or more payables).")],
        repayment_method: Annotated[Any, Field(description="Whether a Client wants to repay the financing in weekly or monthly instalments.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payables Finance Price Breakdown

        This endpoint allows obtaining a price breakdown before financing payables.

        :param id: The unique identifier for the client provided by Bankable. (required)
        :type id: str
        :param financing_amount: The total amount that a Client desires to finance (1 or more payables). (required)
        :type financing_amount: object
        :param repayment_method: Whether a Client wants to repay the financing in weekly or monthly instalments. (required)
        :type repayment_method: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_payables_price_breakdown_serialize(
            id=id,
            financing_amount=financing_amount,
            repayment_method=repayment_method,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayablesPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_payables_price_breakdown_serialize(
        self,
        id,
        financing_amount,
        repayment_method,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if financing_amount is not None:
            
            _query_params.append(('financing_amount', financing_amount))
            
        if repayment_method is not None:
            
            _query_params.append(('repayment_method', repayment_method))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/payables/price-breakdown',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def submit_payables(
        self,
        client_id: Annotated[Optional[Any], Field(description="The unique identifier for the client provided by Bankable.")],
        repayment_method: Annotated[Optional[Any], Field(description="Whether a Client has chosen to repay the financing in weekly or monthly instalments.")],
        instalment_count: Annotated[Optional[Any], Field(description="The requested number of instalments. The maximum values are 51 for weekly and 11 for monthly instalments.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP. All the payables within a request must use the same currency.")],
        payment_date: Annotated[Optional[Any], Field(description="The desired day that the payables should be paid if financed successfully. If not provided, the payables will be paid in the next possible time after financing. The payment date should be in format YYYY-MM-DD, for example, 2024-01-01, and cannot be in the past.")] = None,
        payable: Optional[Any] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubmitPayables200Response:
        """Submit Payables

        This endpoint allows submitting one or more payables for financing and receive a payment plan to review.

        :param client_id: The unique identifier for the client provided by Bankable. (required)
        :type client_id: object
        :param repayment_method: Whether a Client has chosen to repay the financing in weekly or monthly instalments. (required)
        :type repayment_method: object
        :param instalment_count: The requested number of instalments. The maximum values are 51 for weekly and 11 for monthly instalments. (required)
        :type instalment_count: object
        :param currency: The currency must be either EUR or GBP. All the payables within a request must use the same currency. (required)
        :type currency: object
        :param payment_date: The desired day that the payables should be paid if financed successfully. If not provided, the payables will be paid in the next possible time after financing. The payment date should be in format YYYY-MM-DD, for example, 2024-01-01, and cannot be in the past.
        :type payment_date: object
        :param payable:
        :type payable: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_payables_serialize(
            client_id=client_id,
            repayment_method=repayment_method,
            instalment_count=instalment_count,
            currency=currency,
            payment_date=payment_date,
            payable=payable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmitPayables200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def submit_payables_with_http_info(
        self,
        client_id: Annotated[Optional[Any], Field(description="The unique identifier for the client provided by Bankable.")],
        repayment_method: Annotated[Optional[Any], Field(description="Whether a Client has chosen to repay the financing in weekly or monthly instalments.")],
        instalment_count: Annotated[Optional[Any], Field(description="The requested number of instalments. The maximum values are 51 for weekly and 11 for monthly instalments.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP. All the payables within a request must use the same currency.")],
        payment_date: Annotated[Optional[Any], Field(description="The desired day that the payables should be paid if financed successfully. If not provided, the payables will be paid in the next possible time after financing. The payment date should be in format YYYY-MM-DD, for example, 2024-01-01, and cannot be in the past.")] = None,
        payable: Optional[Any] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubmitPayables200Response]:
        """Submit Payables

        This endpoint allows submitting one or more payables for financing and receive a payment plan to review.

        :param client_id: The unique identifier for the client provided by Bankable. (required)
        :type client_id: object
        :param repayment_method: Whether a Client has chosen to repay the financing in weekly or monthly instalments. (required)
        :type repayment_method: object
        :param instalment_count: The requested number of instalments. The maximum values are 51 for weekly and 11 for monthly instalments. (required)
        :type instalment_count: object
        :param currency: The currency must be either EUR or GBP. All the payables within a request must use the same currency. (required)
        :type currency: object
        :param payment_date: The desired day that the payables should be paid if financed successfully. If not provided, the payables will be paid in the next possible time after financing. The payment date should be in format YYYY-MM-DD, for example, 2024-01-01, and cannot be in the past.
        :type payment_date: object
        :param payable:
        :type payable: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_payables_serialize(
            client_id=client_id,
            repayment_method=repayment_method,
            instalment_count=instalment_count,
            currency=currency,
            payment_date=payment_date,
            payable=payable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmitPayables200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def submit_payables_without_preload_content(
        self,
        client_id: Annotated[Optional[Any], Field(description="The unique identifier for the client provided by Bankable.")],
        repayment_method: Annotated[Optional[Any], Field(description="Whether a Client has chosen to repay the financing in weekly or monthly instalments.")],
        instalment_count: Annotated[Optional[Any], Field(description="The requested number of instalments. The maximum values are 51 for weekly and 11 for monthly instalments.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP. All the payables within a request must use the same currency.")],
        payment_date: Annotated[Optional[Any], Field(description="The desired day that the payables should be paid if financed successfully. If not provided, the payables will be paid in the next possible time after financing. The payment date should be in format YYYY-MM-DD, for example, 2024-01-01, and cannot be in the past.")] = None,
        payable: Optional[Any] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit Payables

        This endpoint allows submitting one or more payables for financing and receive a payment plan to review.

        :param client_id: The unique identifier for the client provided by Bankable. (required)
        :type client_id: object
        :param repayment_method: Whether a Client has chosen to repay the financing in weekly or monthly instalments. (required)
        :type repayment_method: object
        :param instalment_count: The requested number of instalments. The maximum values are 51 for weekly and 11 for monthly instalments. (required)
        :type instalment_count: object
        :param currency: The currency must be either EUR or GBP. All the payables within a request must use the same currency. (required)
        :type currency: object
        :param payment_date: The desired day that the payables should be paid if financed successfully. If not provided, the payables will be paid in the next possible time after financing. The payment date should be in format YYYY-MM-DD, for example, 2024-01-01, and cannot be in the past.
        :type payment_date: object
        :param payable:
        :type payable: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_payables_serialize(
            client_id=client_id,
            repayment_method=repayment_method,
            instalment_count=instalment_count,
            currency=currency,
            payment_date=payment_date,
            payable=payable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmitPayables200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _submit_payables_serialize(
        self,
        client_id,
        repayment_method,
        instalment_count,
        currency,
        payment_date,
        payable,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if client_id is not None:
            _form_params.append(('client_id', client_id))
        if repayment_method is not None:
            _form_params.append(('repayment_method', repayment_method))
        if instalment_count is not None:
            _form_params.append(('instalment_count', instalment_count))
        if currency is not None:
            _form_params.append(('currency', currency))
        if payment_date is not None:
            _form_params.append(('payment_date', payment_date))
        if payable is not None:
            _form_params.append(('payable', payable))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/payables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


