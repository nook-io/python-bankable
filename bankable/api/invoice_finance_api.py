# coding: utf-8

"""
    Credit

    # Introduction Description of Bankable Credit RESTful API. Current limitations: - The Credit service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) for security reasons. It is not possible to use Swagger UI and make API calls directly from the browser. - Modification API requests (`POST`, `DELETE`) require additional security scopes granted under the service agreement. - Consider the Bankable limitations for API calls that depend on the contract agreement.

    The version of the OpenAPI document: b6bf82e
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr, field_validator

from typing import Any, Optional

from bankable.models.cancel_invoice200_response import CancelInvoice200Response
from bankable.models.create_invoice201_response import CreateInvoice201Response
from bankable.models.find_invoices200_response import FindInvoices200Response
from bankable.models.get_invoice200_response import GetInvoice200Response
from bankable.models.get_price_breakdown200_response import GetPriceBreakdown200Response

from bankable.api_client import ApiClient
from bankable.api_response import ApiResponse
from bankable.rest import RESTResponseType


class InvoiceFinanceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cancel_invoice(
        self,
        id: Annotated[Any, Field(description="This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CancelInvoice200Response:
        """Cancel Invoice Finance

        This endpoint allows to cancel an invoice's financing.

        :param id: This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_invoice_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelInvoice200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_invoice_with_http_info(
        self,
        id: Annotated[Any, Field(description="This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CancelInvoice200Response]:
        """Cancel Invoice Finance

        This endpoint allows to cancel an invoice's financing.

        :param id: This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_invoice_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelInvoice200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_invoice_without_preload_content(
        self,
        id: Annotated[Any, Field(description="This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Invoice Finance

        This endpoint allows to cancel an invoice's financing.

        :param id: This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_invoice_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelInvoice200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_invoice_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/invoice/{id}/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_invoice(
        self,
        amount: Annotated[Optional[Any], Field(description="The invoice amount can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR.")],
        issuer_country_code: Annotated[Optional[Any], Field(description="The issuer's two-letter country code in ISO 3166 format.")],
        issuer_registration_number: Annotated[Optional[Any], Field(description="The issuer's Company Registration Number.")],
        debtor_country_code: Annotated[Optional[Any], Field(description="The debtor's two-letter country code in ISO 3166 format.")],
        debtor_registration_number: Annotated[Optional[Any], Field(description="The debtor's Company Registration Number.")],
        invoice_number: Annotated[Optional[Any], Field(description="The invoice number as shown on the invoice.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP.")],
        issue_date: Annotated[Optional[Any], Field(description="The issue date should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        due_date: Annotated[Optional[Any], Field(description="The due date should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        payment_reference: Annotated[Optional[Any], Field(description="If there is no separate payment reference number, you can use the invoice number instead.")],
        pdf: Annotated[Optional[Any], Field(description="The invoice PDF file.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateInvoice201Response:
        """Submit Invoice

        This endpoint allows submitting invoices for financing.

        :param amount: The invoice amount can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR. (required)
        :type amount: object
        :param issuer_country_code: The issuer's two-letter country code in ISO 3166 format. (required)
        :type issuer_country_code: object
        :param issuer_registration_number: The issuer's Company Registration Number. (required)
        :type issuer_registration_number: object
        :param debtor_country_code: The debtor's two-letter country code in ISO 3166 format. (required)
        :type debtor_country_code: object
        :param debtor_registration_number: The debtor's Company Registration Number. (required)
        :type debtor_registration_number: object
        :param invoice_number: The invoice number as shown on the invoice. (required)
        :type invoice_number: object
        :param currency: The currency must be either EUR or GBP. (required)
        :type currency: object
        :param issue_date: The issue date should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type issue_date: object
        :param due_date: The due date should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type due_date: object
        :param payment_reference: If there is no separate payment reference number, you can use the invoice number instead. (required)
        :type payment_reference: object
        :param pdf: The invoice PDF file. (required)
        :type pdf: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoice_serialize(
            amount=amount,
            issuer_country_code=issuer_country_code,
            issuer_registration_number=issuer_registration_number,
            debtor_country_code=debtor_country_code,
            debtor_registration_number=debtor_registration_number,
            invoice_number=invoice_number,
            currency=currency,
            issue_date=issue_date,
            due_date=due_date,
            payment_reference=payment_reference,
            pdf=pdf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateInvoice201Response",
            '400': "SubmitBankData400Response",
            '409': "Conflict",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_invoice_with_http_info(
        self,
        amount: Annotated[Optional[Any], Field(description="The invoice amount can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR.")],
        issuer_country_code: Annotated[Optional[Any], Field(description="The issuer's two-letter country code in ISO 3166 format.")],
        issuer_registration_number: Annotated[Optional[Any], Field(description="The issuer's Company Registration Number.")],
        debtor_country_code: Annotated[Optional[Any], Field(description="The debtor's two-letter country code in ISO 3166 format.")],
        debtor_registration_number: Annotated[Optional[Any], Field(description="The debtor's Company Registration Number.")],
        invoice_number: Annotated[Optional[Any], Field(description="The invoice number as shown on the invoice.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP.")],
        issue_date: Annotated[Optional[Any], Field(description="The issue date should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        due_date: Annotated[Optional[Any], Field(description="The due date should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        payment_reference: Annotated[Optional[Any], Field(description="If there is no separate payment reference number, you can use the invoice number instead.")],
        pdf: Annotated[Optional[Any], Field(description="The invoice PDF file.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateInvoice201Response]:
        """Submit Invoice

        This endpoint allows submitting invoices for financing.

        :param amount: The invoice amount can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR. (required)
        :type amount: object
        :param issuer_country_code: The issuer's two-letter country code in ISO 3166 format. (required)
        :type issuer_country_code: object
        :param issuer_registration_number: The issuer's Company Registration Number. (required)
        :type issuer_registration_number: object
        :param debtor_country_code: The debtor's two-letter country code in ISO 3166 format. (required)
        :type debtor_country_code: object
        :param debtor_registration_number: The debtor's Company Registration Number. (required)
        :type debtor_registration_number: object
        :param invoice_number: The invoice number as shown on the invoice. (required)
        :type invoice_number: object
        :param currency: The currency must be either EUR or GBP. (required)
        :type currency: object
        :param issue_date: The issue date should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type issue_date: object
        :param due_date: The due date should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type due_date: object
        :param payment_reference: If there is no separate payment reference number, you can use the invoice number instead. (required)
        :type payment_reference: object
        :param pdf: The invoice PDF file. (required)
        :type pdf: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoice_serialize(
            amount=amount,
            issuer_country_code=issuer_country_code,
            issuer_registration_number=issuer_registration_number,
            debtor_country_code=debtor_country_code,
            debtor_registration_number=debtor_registration_number,
            invoice_number=invoice_number,
            currency=currency,
            issue_date=issue_date,
            due_date=due_date,
            payment_reference=payment_reference,
            pdf=pdf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateInvoice201Response",
            '400': "SubmitBankData400Response",
            '409': "Conflict",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_invoice_without_preload_content(
        self,
        amount: Annotated[Optional[Any], Field(description="The invoice amount can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR.")],
        issuer_country_code: Annotated[Optional[Any], Field(description="The issuer's two-letter country code in ISO 3166 format.")],
        issuer_registration_number: Annotated[Optional[Any], Field(description="The issuer's Company Registration Number.")],
        debtor_country_code: Annotated[Optional[Any], Field(description="The debtor's two-letter country code in ISO 3166 format.")],
        debtor_registration_number: Annotated[Optional[Any], Field(description="The debtor's Company Registration Number.")],
        invoice_number: Annotated[Optional[Any], Field(description="The invoice number as shown on the invoice.")],
        currency: Annotated[Optional[Any], Field(description="The currency must be either EUR or GBP.")],
        issue_date: Annotated[Optional[Any], Field(description="The issue date should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        due_date: Annotated[Optional[Any], Field(description="The due date should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        payment_reference: Annotated[Optional[Any], Field(description="If there is no separate payment reference number, you can use the invoice number instead.")],
        pdf: Annotated[Optional[Any], Field(description="The invoice PDF file.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit Invoice

        This endpoint allows submitting invoices for financing.

        :param amount: The invoice amount can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR. (required)
        :type amount: object
        :param issuer_country_code: The issuer's two-letter country code in ISO 3166 format. (required)
        :type issuer_country_code: object
        :param issuer_registration_number: The issuer's Company Registration Number. (required)
        :type issuer_registration_number: object
        :param debtor_country_code: The debtor's two-letter country code in ISO 3166 format. (required)
        :type debtor_country_code: object
        :param debtor_registration_number: The debtor's Company Registration Number. (required)
        :type debtor_registration_number: object
        :param invoice_number: The invoice number as shown on the invoice. (required)
        :type invoice_number: object
        :param currency: The currency must be either EUR or GBP. (required)
        :type currency: object
        :param issue_date: The issue date should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type issue_date: object
        :param due_date: The due date should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type due_date: object
        :param payment_reference: If there is no separate payment reference number, you can use the invoice number instead. (required)
        :type payment_reference: object
        :param pdf: The invoice PDF file. (required)
        :type pdf: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoice_serialize(
            amount=amount,
            issuer_country_code=issuer_country_code,
            issuer_registration_number=issuer_registration_number,
            debtor_country_code=debtor_country_code,
            debtor_registration_number=debtor_registration_number,
            invoice_number=invoice_number,
            currency=currency,
            issue_date=issue_date,
            due_date=due_date,
            payment_reference=payment_reference,
            pdf=pdf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateInvoice201Response",
            '400': "SubmitBankData400Response",
            '409': "Conflict",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_invoice_serialize(
        self,
        amount,
        issuer_country_code,
        issuer_registration_number,
        debtor_country_code,
        debtor_registration_number,
        invoice_number,
        currency,
        issue_date,
        due_date,
        payment_reference,
        pdf,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if amount is not None:
            _form_params.append(('amount', amount))
        if issuer_country_code is not None:
            _form_params.append(('issuer_country_code', issuer_country_code))
        if issuer_registration_number is not None:
            _form_params.append(('issuer_registration_number', issuer_registration_number))
        if debtor_country_code is not None:
            _form_params.append(('debtor_country_code', debtor_country_code))
        if debtor_registration_number is not None:
            _form_params.append(('debtor_registration_number', debtor_registration_number))
        if invoice_number is not None:
            _form_params.append(('invoice_number', invoice_number))
        if currency is not None:
            _form_params.append(('currency', currency))
        if issue_date is not None:
            _form_params.append(('issue_date', issue_date))
        if due_date is not None:
            _form_params.append(('due_date', due_date))
        if payment_reference is not None:
            _form_params.append(('payment_reference', payment_reference))
        if pdf is not None:
            _form_params.append(('pdf', pdf))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/invoice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_invoices(
        self,
        limit: Annotated[Optional[StrictStr], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[StrictStr], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        invoice_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the invoice number given.")] = None,
        invoice_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of invoice number. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        payment_reference: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the payment reference given.")] = None,
        payment_reference2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of payment references. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        face_value_from: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by face value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        face_value_to: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by face value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the currency code given. The format is ISO 4217.")] = None,
        currency2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        issuer_name_like: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the given issuer name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.")] = None,
        issuer_country: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of issuer country codes in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        issuer_registration_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the issuer registration number given.")] = None,
        issuer_registration_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of issuer registration numbers. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        debtor_name_like: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the given debtor name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.")] = None,
        debtor_country: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of debtor countries in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        debtor_registration_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the debtor registration number given.")] = None,
        debtor_registration_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of debtor registration numbers. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FindInvoices200Response:
        """List Invoices

        This endpoint allows retrieving a paginated list of invoices, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: str
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: str
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: str
        :param invoice_number: Use to filter the invoice list by the invoice number given.
        :type invoice_number: str
        :param invoice_number2: Use to filter the invoice list by a collection of invoice number. You must use this filter by adding multiple times this query parameter with different values.
        :type invoice_number2: str
        :param payment_reference: Use to filter the invoice list by the payment reference given.
        :type payment_reference: str
        :param payment_reference2: Use to filter the invoice list by a collection of payment references. You must use this filter by adding multiple times this query parameter with different values.
        :type payment_reference2: str
        :param face_value_from: Use to filter the invoice list by face value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type face_value_from: str
        :param face_value_to: Use to filter the invoice list by face value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type face_value_to: str
        :param currency: Use to filter the invoice list by the currency code given. The format is ISO 4217.
        :type currency: str
        :param currency2: Use to filter the invoice list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency2: str
        :param issuer_name_like: Use to filter the invoice list by the given issuer name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.
        :type issuer_name_like: str
        :param issuer_country: Use to filter the invoice list by a collection of issuer country codes in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.
        :type issuer_country: str
        :param issuer_registration_number: Use to filter the invoice list by the issuer registration number given.
        :type issuer_registration_number: str
        :param issuer_registration_number2: Use to filter the invoice list by a collection of issuer registration numbers. You must use this filter by adding multiple times this query parameter with different values.
        :type issuer_registration_number2: str
        :param debtor_name_like: Use to filter the invoice list by the given debtor name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.
        :type debtor_name_like: str
        :param debtor_country: Use to filter the invoice list by a collection of debtor countries in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.
        :type debtor_country: str
        :param debtor_registration_number: Use to filter the invoice list by the debtor registration number given.
        :type debtor_registration_number: str
        :param debtor_registration_number2: Use to filter the invoice list by a collection of debtor registration numbers. You must use this filter by adding multiple times this query parameter with different values.
        :type debtor_registration_number2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_invoices_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            invoice_number=invoice_number,
            invoice_number2=invoice_number2,
            payment_reference=payment_reference,
            payment_reference2=payment_reference2,
            face_value_from=face_value_from,
            face_value_to=face_value_to,
            currency=currency,
            currency2=currency2,
            issuer_name_like=issuer_name_like,
            issuer_country=issuer_country,
            issuer_registration_number=issuer_registration_number,
            issuer_registration_number2=issuer_registration_number2,
            debtor_name_like=debtor_name_like,
            debtor_country=debtor_country,
            debtor_registration_number=debtor_registration_number,
            debtor_registration_number2=debtor_registration_number2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindInvoices200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_invoices_with_http_info(
        self,
        limit: Annotated[Optional[StrictStr], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[StrictStr], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        invoice_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the invoice number given.")] = None,
        invoice_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of invoice number. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        payment_reference: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the payment reference given.")] = None,
        payment_reference2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of payment references. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        face_value_from: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by face value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        face_value_to: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by face value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the currency code given. The format is ISO 4217.")] = None,
        currency2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        issuer_name_like: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the given issuer name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.")] = None,
        issuer_country: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of issuer country codes in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        issuer_registration_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the issuer registration number given.")] = None,
        issuer_registration_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of issuer registration numbers. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        debtor_name_like: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the given debtor name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.")] = None,
        debtor_country: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of debtor countries in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        debtor_registration_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the debtor registration number given.")] = None,
        debtor_registration_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of debtor registration numbers. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FindInvoices200Response]:
        """List Invoices

        This endpoint allows retrieving a paginated list of invoices, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: str
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: str
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: str
        :param invoice_number: Use to filter the invoice list by the invoice number given.
        :type invoice_number: str
        :param invoice_number2: Use to filter the invoice list by a collection of invoice number. You must use this filter by adding multiple times this query parameter with different values.
        :type invoice_number2: str
        :param payment_reference: Use to filter the invoice list by the payment reference given.
        :type payment_reference: str
        :param payment_reference2: Use to filter the invoice list by a collection of payment references. You must use this filter by adding multiple times this query parameter with different values.
        :type payment_reference2: str
        :param face_value_from: Use to filter the invoice list by face value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type face_value_from: str
        :param face_value_to: Use to filter the invoice list by face value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type face_value_to: str
        :param currency: Use to filter the invoice list by the currency code given. The format is ISO 4217.
        :type currency: str
        :param currency2: Use to filter the invoice list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency2: str
        :param issuer_name_like: Use to filter the invoice list by the given issuer name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.
        :type issuer_name_like: str
        :param issuer_country: Use to filter the invoice list by a collection of issuer country codes in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.
        :type issuer_country: str
        :param issuer_registration_number: Use to filter the invoice list by the issuer registration number given.
        :type issuer_registration_number: str
        :param issuer_registration_number2: Use to filter the invoice list by a collection of issuer registration numbers. You must use this filter by adding multiple times this query parameter with different values.
        :type issuer_registration_number2: str
        :param debtor_name_like: Use to filter the invoice list by the given debtor name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.
        :type debtor_name_like: str
        :param debtor_country: Use to filter the invoice list by a collection of debtor countries in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.
        :type debtor_country: str
        :param debtor_registration_number: Use to filter the invoice list by the debtor registration number given.
        :type debtor_registration_number: str
        :param debtor_registration_number2: Use to filter the invoice list by a collection of debtor registration numbers. You must use this filter by adding multiple times this query parameter with different values.
        :type debtor_registration_number2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_invoices_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            invoice_number=invoice_number,
            invoice_number2=invoice_number2,
            payment_reference=payment_reference,
            payment_reference2=payment_reference2,
            face_value_from=face_value_from,
            face_value_to=face_value_to,
            currency=currency,
            currency2=currency2,
            issuer_name_like=issuer_name_like,
            issuer_country=issuer_country,
            issuer_registration_number=issuer_registration_number,
            issuer_registration_number2=issuer_registration_number2,
            debtor_name_like=debtor_name_like,
            debtor_country=debtor_country,
            debtor_registration_number=debtor_registration_number,
            debtor_registration_number2=debtor_registration_number2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindInvoices200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_invoices_without_preload_content(
        self,
        limit: Annotated[Optional[StrictStr], Field(description="The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.")] = None,
        sort_by: Annotated[Optional[Any], Field(description="Use to determine which value to use to sort the paginated result. The default value is created_at.")] = None,
        descending: Annotated[Optional[StrictStr], Field(description="Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.")] = None,
        invoice_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the invoice number given.")] = None,
        invoice_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of invoice number. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        payment_reference: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the payment reference given.")] = None,
        payment_reference2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of payment references. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        face_value_from: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by face value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        face_value_to: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by face value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the currency code given. The format is ISO 4217.")] = None,
        currency2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.")] = None,
        issuer_name_like: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the given issuer name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.")] = None,
        issuer_country: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of issuer country codes in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        issuer_registration_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the issuer registration number given.")] = None,
        issuer_registration_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of issuer registration numbers. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        debtor_name_like: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the given debtor name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.")] = None,
        debtor_country: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of debtor countries in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        debtor_registration_number: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by the debtor registration number given.")] = None,
        debtor_registration_number2: Annotated[Optional[StrictStr], Field(description="Use to filter the invoice list by a collection of debtor registration numbers. You must use this filter by adding multiple times this query parameter with different values.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Invoices

        This endpoint allows retrieving a paginated list of invoices, applying filters and sorting options.

        :param limit: The number of items to obtain per response. The limit/offset schema is used for pagination. The default value is 10. The maximum allowed value is 100.
        :type limit: str
        :param offset: The number of items to skip in the response. The limit/offset schema is used for pagination. The default value is 0.
        :type offset: str
        :param sort_by: Use to determine which value to use to sort the paginated result. The default value is created_at.
        :type sort_by: object
        :param descending: Use to determine the sorting order as either descending or ascending. The default value is false, which corresponds to ascending order.
        :type descending: str
        :param invoice_number: Use to filter the invoice list by the invoice number given.
        :type invoice_number: str
        :param invoice_number2: Use to filter the invoice list by a collection of invoice number. You must use this filter by adding multiple times this query parameter with different values.
        :type invoice_number2: str
        :param payment_reference: Use to filter the invoice list by the payment reference given.
        :type payment_reference: str
        :param payment_reference2: Use to filter the invoice list by a collection of payment references. You must use this filter by adding multiple times this query parameter with different values.
        :type payment_reference2: str
        :param face_value_from: Use to filter the invoice list by face value above than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type face_value_from: str
        :param face_value_to: Use to filter the invoice list by face value below than the given one. It must be sent as cents. For example, the value 191.95 has to be sent as 19195.
        :type face_value_to: str
        :param currency: Use to filter the invoice list by the currency code given. The format is ISO 4217.
        :type currency: str
        :param currency2: Use to filter the invoice list by a collection of currencies. You must use this filter by adding multiple times this query parameter with different values. The format is ISO 4217.
        :type currency2: str
        :param issuer_name_like: Use to filter the invoice list by the given issuer name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.
        :type issuer_name_like: str
        :param issuer_country: Use to filter the invoice list by a collection of issuer country codes in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.
        :type issuer_country: str
        :param issuer_registration_number: Use to filter the invoice list by the issuer registration number given.
        :type issuer_registration_number: str
        :param issuer_registration_number2: Use to filter the invoice list by a collection of issuer registration numbers. You must use this filter by adding multiple times this query parameter with different values.
        :type issuer_registration_number2: str
        :param debtor_name_like: Use to filter the invoice list by the given debtor name. The like suffix determines that the query we end up doing is a LIKE %VALUE%.
        :type debtor_name_like: str
        :param debtor_country: Use to filter the invoice list by a collection of debtor countries in ISO 3166 format. You must use this filter by adding multiple times this query parameter with different values.
        :type debtor_country: str
        :param debtor_registration_number: Use to filter the invoice list by the debtor registration number given.
        :type debtor_registration_number: str
        :param debtor_registration_number2: Use to filter the invoice list by a collection of debtor registration numbers. You must use this filter by adding multiple times this query parameter with different values.
        :type debtor_registration_number2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_invoices_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            descending=descending,
            invoice_number=invoice_number,
            invoice_number2=invoice_number2,
            payment_reference=payment_reference,
            payment_reference2=payment_reference2,
            face_value_from=face_value_from,
            face_value_to=face_value_to,
            currency=currency,
            currency2=currency2,
            issuer_name_like=issuer_name_like,
            issuer_country=issuer_country,
            issuer_registration_number=issuer_registration_number,
            issuer_registration_number2=issuer_registration_number2,
            debtor_name_like=debtor_name_like,
            debtor_country=debtor_country,
            debtor_registration_number=debtor_registration_number,
            debtor_registration_number2=debtor_registration_number2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindInvoices200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_invoices_serialize(
        self,
        limit,
        offset,
        sort_by,
        descending,
        invoice_number,
        invoice_number2,
        payment_reference,
        payment_reference2,
        face_value_from,
        face_value_to,
        currency,
        currency2,
        issuer_name_like,
        issuer_country,
        issuer_registration_number,
        issuer_registration_number2,
        debtor_name_like,
        debtor_country,
        debtor_registration_number,
        debtor_registration_number2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if descending is not None:
            
            _query_params.append(('descending', descending))
            
        if invoice_number is not None:
            
            _query_params.append(('invoice_number', invoice_number))
            
        if invoice_number2 is not None:
            
            _query_params.append(('invoice_number[]', invoice_number2))
            
        if payment_reference is not None:
            
            _query_params.append(('payment_reference', payment_reference))
            
        if payment_reference2 is not None:
            
            _query_params.append(('payment_reference[]', payment_reference2))
            
        if face_value_from is not None:
            
            _query_params.append(('face_value_from', face_value_from))
            
        if face_value_to is not None:
            
            _query_params.append(('face_value_to', face_value_to))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if currency2 is not None:
            
            _query_params.append(('currency[]', currency2))
            
        if issuer_name_like is not None:
            
            _query_params.append(('issuer_name_like', issuer_name_like))
            
        if issuer_country is not None:
            
            _query_params.append(('issuer_country[]', issuer_country))
            
        if issuer_registration_number is not None:
            
            _query_params.append(('issuer_registration_number', issuer_registration_number))
            
        if issuer_registration_number2 is not None:
            
            _query_params.append(('issuer_registration_number[]', issuer_registration_number2))
            
        if debtor_name_like is not None:
            
            _query_params.append(('debtor_name_like', debtor_name_like))
            
        if debtor_country is not None:
            
            _query_params.append(('debtor_country[]', debtor_country))
            
        if debtor_registration_number is not None:
            
            _query_params.append(('debtor_registration_number', debtor_registration_number))
            
        if debtor_registration_number2 is not None:
            
            _query_params.append(('debtor_registration_number[]', debtor_registration_number2))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/invoices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_invoice(
        self,
        id: Annotated[Any, Field(description="This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetInvoice200Response:
        """Get Invoice Details

        This endpoint allows obtaining the current status and details of an invoice.

        :param id: This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_invoice_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInvoice200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_invoice_with_http_info(
        self,
        id: Annotated[Any, Field(description="This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetInvoice200Response]:
        """Get Invoice Details

        This endpoint allows obtaining the current status and details of an invoice.

        :param id: This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_invoice_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInvoice200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_invoice_without_preload_content(
        self,
        id: Annotated[Any, Field(description="This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Invoice Details

        This endpoint allows obtaining the current status and details of an invoice.

        :param id: This is the Invoice ID provided by Bankable when the invoice was created (see the \"Create invoice\" response). (required)
        :type id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_invoice_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInvoice200Response",
            '400': "SubmitBankData400Response",
            '403': "Unauthorized",
            '404': "NotFound",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_invoice_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/invoice/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_price_breakdown(
        self,
        debtor_country_code: Annotated[StrictStr, Field(description="The debtor's two-letter country code in ISO 3166 format.")],
        debtor_crn: Annotated[StrictStr, Field(description="The debtor's Company Registration Number.")],
        issuer_country_code: Annotated[StrictStr, Field(description="The issuer's two-letter country code in ISO 3166 format.")],
        issuer_crn: Annotated[StrictStr, Field(description="The issuer's Company Registration Number.")],
        face_value: Annotated[Any, Field(description="The invoice face value can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR .")],
        due_date: Annotated[StrictStr, Field(description="The due date as shown on the potential invoice to be financed. Should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPriceBreakdown200Response:
        """Get Invoice Finance Price Breakdown

        This endpoint allows obtaining an estimated price breakdown before financing an invoice.

        :param debtor_country_code: The debtor's two-letter country code in ISO 3166 format. (required)
        :type debtor_country_code: str
        :param debtor_crn: The debtor's Company Registration Number. (required)
        :type debtor_crn: str
        :param issuer_country_code: The issuer's two-letter country code in ISO 3166 format. (required)
        :type issuer_country_code: str
        :param issuer_crn: The issuer's Company Registration Number. (required)
        :type issuer_crn: str
        :param face_value: The invoice face value can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR . (required)
        :type face_value: object
        :param due_date: The due date as shown on the potential invoice to be financed. Should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type due_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_price_breakdown_serialize(
            debtor_country_code=debtor_country_code,
            debtor_crn=debtor_crn,
            issuer_country_code=issuer_country_code,
            issuer_crn=issuer_crn,
            face_value=face_value,
            due_date=due_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_price_breakdown_with_http_info(
        self,
        debtor_country_code: Annotated[StrictStr, Field(description="The debtor's two-letter country code in ISO 3166 format.")],
        debtor_crn: Annotated[StrictStr, Field(description="The debtor's Company Registration Number.")],
        issuer_country_code: Annotated[StrictStr, Field(description="The issuer's two-letter country code in ISO 3166 format.")],
        issuer_crn: Annotated[StrictStr, Field(description="The issuer's Company Registration Number.")],
        face_value: Annotated[Any, Field(description="The invoice face value can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR .")],
        due_date: Annotated[StrictStr, Field(description="The due date as shown on the potential invoice to be financed. Should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPriceBreakdown200Response]:
        """Get Invoice Finance Price Breakdown

        This endpoint allows obtaining an estimated price breakdown before financing an invoice.

        :param debtor_country_code: The debtor's two-letter country code in ISO 3166 format. (required)
        :type debtor_country_code: str
        :param debtor_crn: The debtor's Company Registration Number. (required)
        :type debtor_crn: str
        :param issuer_country_code: The issuer's two-letter country code in ISO 3166 format. (required)
        :type issuer_country_code: str
        :param issuer_crn: The issuer's Company Registration Number. (required)
        :type issuer_crn: str
        :param face_value: The invoice face value can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR . (required)
        :type face_value: object
        :param due_date: The due date as shown on the potential invoice to be financed. Should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type due_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_price_breakdown_serialize(
            debtor_country_code=debtor_country_code,
            debtor_crn=debtor_crn,
            issuer_country_code=issuer_country_code,
            issuer_crn=issuer_crn,
            face_value=face_value,
            due_date=due_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_price_breakdown_without_preload_content(
        self,
        debtor_country_code: Annotated[StrictStr, Field(description="The debtor's two-letter country code in ISO 3166 format.")],
        debtor_crn: Annotated[StrictStr, Field(description="The debtor's Company Registration Number.")],
        issuer_country_code: Annotated[StrictStr, Field(description="The issuer's two-letter country code in ISO 3166 format.")],
        issuer_crn: Annotated[StrictStr, Field(description="The issuer's Company Registration Number.")],
        face_value: Annotated[Any, Field(description="The invoice face value can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR .")],
        due_date: Annotated[StrictStr, Field(description="The due date as shown on the potential invoice to be financed. Should be in format YYYY-MM-DD, for example, 2022-01-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Invoice Finance Price Breakdown

        This endpoint allows obtaining an estimated price breakdown before financing an invoice.

        :param debtor_country_code: The debtor's two-letter country code in ISO 3166 format. (required)
        :type debtor_country_code: str
        :param debtor_crn: The debtor's Company Registration Number. (required)
        :type debtor_crn: str
        :param issuer_country_code: The issuer's two-letter country code in ISO 3166 format. (required)
        :type issuer_country_code: str
        :param issuer_crn: The issuer's Company Registration Number. (required)
        :type issuer_crn: str
        :param face_value: The invoice face value can only include numbers and dot (.) must be presented in (EUR) or pence (GBP). For example, 100.00 EUR . (required)
        :type face_value: object
        :param due_date: The due date as shown on the potential invoice to be financed. Should be in format YYYY-MM-DD, for example, 2022-01-01. (required)
        :type due_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_price_breakdown_serialize(
            debtor_country_code=debtor_country_code,
            debtor_crn=debtor_crn,
            issuer_country_code=issuer_country_code,
            issuer_crn=issuer_crn,
            face_value=face_value,
            due_date=due_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPriceBreakdown200Response",
            '400': "SubmitBankData400Response",
            '500': "Internal",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_price_breakdown_serialize(
        self,
        debtor_country_code,
        debtor_crn,
        issuer_country_code,
        issuer_crn,
        face_value,
        due_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if debtor_country_code is not None:
            
            _query_params.append(('debtor_country_code', debtor_country_code))
            
        if debtor_crn is not None:
            
            _query_params.append(('debtor_crn', debtor_crn))
            
        if issuer_country_code is not None:
            
            _query_params.append(('issuer_country_code', issuer_country_code))
            
        if issuer_crn is not None:
            
            _query_params.append(('issuer_crn', issuer_crn))
            
        if face_value is not None:
            
            _query_params.append(('face_value', face_value))
            
        if due_date is not None:
            
            _query_params.append(('due_date', due_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/invoice/price-breakdown',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


